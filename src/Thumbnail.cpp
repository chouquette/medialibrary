/*****************************************************************************
 * Media Library
 *****************************************************************************
 * Copyright (C) 2015-2018 Hugo Beauzée-Luyssen, Videolabs, VideoLAN
 *
 * Authors: Hugo Beauzée-Luyssen<hugo@beauzee.fr>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
 *****************************************************************************/

#if HAVE_CONFIG_H
# include "config.h"
#endif

#include "Thumbnail.h"
#include "utils/Filename.h"

namespace medialibrary
{

const std::string Thumbnail::Table::Name = "Thumbnail";
const std::string Thumbnail::Table::PrimaryKeyColumn = "id_thumbnail";
int64_t Thumbnail::*const Thumbnail::Table::PrimaryKey = &Thumbnail::m_id;

const std::string Thumbnail::EmptyMrl;

Thumbnail::Thumbnail( MediaLibraryPtr ml, sqlite::Row& row )
    : m_ml( ml )
    , m_id( row.extract<decltype(m_id)>() )
    , m_mrl( row.extract<decltype(m_mrl)>() )
    , m_origin( row.extract<decltype(m_origin)>() )
    , m_isGenerated( row.extract<decltype(m_isGenerated)>() )
{
    // If the thumbnail was generated by the medialibrary, we store it as a
    // relative path, from the user provided workspace
    if ( m_isGenerated == true && m_mrl.find( m_ml->thumbnailPath() ) != 0 )
        m_mrl = m_ml->thumbnailPath() + m_mrl;
}

Thumbnail::Thumbnail( MediaLibraryPtr ml, std::string mrl,
                      Thumbnail::Origin origin, bool isGenerated )
    : m_ml( ml )
    , m_id( 0 )
    , m_mrl( std::move( mrl ) )
    , m_origin( origin )
    , m_isGenerated( isGenerated )
{
    if ( m_isGenerated == true && m_mrl.find( m_ml->thumbnailPath() ) != 0 )
        m_mrl = m_ml->thumbnailPath() + m_mrl;
}

int64_t Thumbnail::id() const
{
    return m_id;
}

const std::string& Thumbnail::mrl() const
{
    assert( isValid() == true );
    return m_mrl;
}

bool Thumbnail::update( std::string mrl, Origin origin, bool isGenerated )
{
    if ( m_mrl == mrl && m_origin == origin && isGenerated == m_isGenerated )
        return true;
    static const std::string req = "UPDATE " + Thumbnail::Table::Name +
            " SET mrl = ?, origin = ?, is_generated = ? WHERE id_thumbnail = ?";
    if( sqlite::Tools::executeUpdate( m_ml->getConn(), req, mrl, origin,
                                      isGenerated, m_id ) == false )
        return false;
    m_mrl = std::move( mrl );
    m_origin = origin;
    m_isGenerated = isGenerated;
    return true;
}

bool Thumbnail::isValid() const
{
    return m_mrl.empty() == false;
}

Thumbnail::Origin Thumbnail::origin() const
{
    return m_origin;
}

bool Thumbnail::isGenerated() const
{
    return m_isGenerated;
}

void Thumbnail::createTable( sqlite::Connection* dbConnection )
{
    const std::string req = "CREATE TABLE IF NOT EXISTS " + Thumbnail::Table::Name +
            "("
                "id_thumbnail INTEGER PRIMARY KEY AUTOINCREMENT,"
                "mrl TEXT,"
                "origin INTEGER NOT NULL,"
                "is_generated BOOLEAN NOT NULL"
            ")";
    sqlite::Tools::executeRequest( dbConnection, req );
}

std::shared_ptr<Thumbnail> Thumbnail::create( MediaLibraryPtr ml, std::string mrl,
                                              Thumbnail::Origin origin, bool isGenerated )
{
    static const std::string req = "INSERT INTO " + Thumbnail::Table::Name +
            "(mrl, origin, is_generated) VALUES(?,?,?)";
    if ( isGenerated == true )
        mrl = utils::file::removePath( mrl, ml->thumbnailPath() );
    assert( mrl.empty() == false || ( origin == Origin::Media && isGenerated == false ) );
    auto self = std::make_shared<Thumbnail>( ml, mrl, origin, isGenerated );
    if ( DatabaseHelpers<Thumbnail>::insert( ml, self, req,
                                             sqlite::NullableString{ mrl },
                                             origin, isGenerated ) == false )
        return nullptr;
    return self;
}

int64_t Thumbnail::insert()
{
    assert( m_id == 0 );
    static const std::string req = "INSERT INTO " + Thumbnail::Table::Name +
            "(mrl, origin, is_generated) VALUES(?,?,?)";
    auto pKey = sqlite::Tools::executeInsert( m_ml->getConn(), req, m_mrl, m_origin,
                                         m_isGenerated );
    if ( pKey == 0 )
        return 0;
    m_id = pKey;
    return m_id;
}

bool Thumbnail::deleteFailureRecords(MediaLibraryPtr ml)
{
    static const std::string req = "DELETE FROM " + Table::Name +
                                   " WHERE mrl IS NULL";
    return sqlite::Tools::executeDelete( ml->getConn(), req );
}


}
