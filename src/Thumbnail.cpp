/*****************************************************************************
 * Media Library
 *****************************************************************************
 * Copyright (C) 2015-2018 Hugo Beauzée-Luyssen, Videolabs, VideoLAN
 *
 * Authors: Hugo Beauzée-Luyssen<hugo@beauzee.fr>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
 *****************************************************************************/

#if HAVE_CONFIG_H
# include "config.h"
#endif

#include "Thumbnail.h"
#include "utils/Filename.h"

namespace medialibrary
{

const std::string Thumbnail::Table::Name = "Thumbnail";
const std::string Thumbnail::Table::PrimaryKeyColumn = "id_thumbnail";
int64_t Thumbnail::*const Thumbnail::Table::PrimaryKey = &Thumbnail::m_id;

const std::string Thumbnail::EmptyMrl;

Thumbnail::Thumbnail( MediaLibraryPtr ml, sqlite::Row& row )
    : m_ml( ml )
    , m_id( row.extract<decltype(m_id)>() )
    , m_mrl( row.extract<decltype(m_mrl)>() )
    , m_origin( row.extract<decltype(m_origin)>() )
    , m_isOwned( row.extract<decltype(m_isOwned)>() )
{
    assert( row.hasRemainingColumns() == false );
    // If the thumbnail was generated by the medialibrary, we store it as a
    // relative path, from the user provided workspace
    if ( m_isOwned == true )
    {
        auto thumbnailDirMrl = utils::file::toMrl( m_ml->thumbnailPath() );
        assert( m_mrl.find( thumbnailDirMrl ) == std::string::npos );
        // We expect the relative part of the mrl to be already encoded, however
        // the path to the thumbnail directory is stored as a file path
        m_mrl = thumbnailDirMrl + m_mrl;
    }
}

Thumbnail::Thumbnail( MediaLibraryPtr ml, std::string mrl,
                      Thumbnail::Origin origin, bool isOwned )
    : m_ml( ml )
    , m_id( 0 )
    , m_mrl( std::move( mrl ) )
    , m_origin( origin )
    , m_isOwned( isOwned )
{
    // Store the mrl as is, and fiddle with it upon insertion as we only care
    // about storing a relative path in db, but we want to return the mrl as it
    // was given, ie. as an absolute mrl.
    assert( ( m_mrl.empty() == true && isOwned == false ) ||
            utils::file::scheme( m_mrl ).empty() == false );
}

int64_t Thumbnail::id() const
{
    return m_id;
}

const std::string& Thumbnail::mrl() const
{
    assert( isValid() == true );
    return m_mrl;
}

bool Thumbnail::update( std::string mrl, Origin origin, bool isOwned )
{
    if ( m_mrl == mrl && m_origin == origin && isOwned == m_isOwned )
        return true;
    std::string storedMrl;
    if ( isOwned )
        storedMrl = toRelativeMrl( mrl );
    else
        storedMrl = mrl;
    static const std::string req = "UPDATE " + Thumbnail::Table::Name +
            " SET mrl = ?, origin = ?, is_generated = ? WHERE id_thumbnail = ?";
    if( sqlite::Tools::executeUpdate( m_ml->getConn(), req, storedMrl, origin,
                                      isOwned, m_id ) == false )
        return false;
    m_mrl = std::move( mrl );
    m_origin = origin;
    m_isOwned = isOwned;
    return true;
}

bool Thumbnail::isValid() const
{
    return m_mrl.empty() == false;
}

Thumbnail::Origin Thumbnail::origin() const
{
    return m_origin;
}

bool Thumbnail::isOwned() const
{
    return m_isOwned;
}

bool Thumbnail::isFailureRecord() const
{
    return m_mrl.empty() == true &&
           m_origin == Origin::Media &&
           m_isOwned == false;
}

void Thumbnail::createTable( sqlite::Connection* dbConnection )
{
    const std::string reqs[] = {
        #include "database/tables/Thumbnail_v17.sql"
    };
    for ( const auto& req : reqs )
        sqlite::Tools::executeRequest( dbConnection, req );
}

std::shared_ptr<Thumbnail> Thumbnail::create( MediaLibraryPtr ml, std::string mrl,
                                              Thumbnail::Origin origin, bool isOwned )
{
    static const std::string req = "INSERT INTO " + Thumbnail::Table::Name +
            "(mrl, origin, is_generated) VALUES(?,?,?)";
    auto self = std::make_shared<Thumbnail>( ml, mrl, origin, isOwned );
    assert( self->isValid() == true || self->isFailureRecord() == true );
    if ( DatabaseHelpers<Thumbnail>::insert( ml, self, req,
                                             sqlite::NullableString{ mrl },
                                             origin, isOwned ) == false )
        return nullptr;
    return self;
}

int64_t Thumbnail::insert()
{
    assert( m_id == 0 );
    static const std::string req = "INSERT INTO " + Thumbnail::Table::Name +
            "(mrl, origin, is_generated) VALUES(?,?,?)";
    auto pKey = sqlite::Tools::executeInsert( m_ml->getConn(), req,
                            m_isOwned == true ? toRelativeMrl( m_mrl ) : m_mrl,
                            m_origin, m_isOwned );
    if ( pKey == 0 )
        return 0;
    m_id = pKey;
    return m_id;
}

bool Thumbnail::deleteFailureRecords(MediaLibraryPtr ml)
{
    static const std::string req = "DELETE FROM " + Table::Name +
                                   " WHERE mrl IS NULL";
    return sqlite::Tools::executeDelete( ml->getConn(), req );
}

std::string Thumbnail::pathForMedia( MediaLibraryPtr ml, int64_t mediaId )
{
    return ml->thumbnailPath() + std::to_string( mediaId ) + ".jpg";
}

std::string Thumbnail::pathForAlbum( MediaLibraryPtr ml, int64_t albumId )
{
    return ml->thumbnailPath() + "album_" + std::to_string( albumId ) + ".jpg";
}

std::string Thumbnail::toRelativeMrl( const std::string& absoluteMrl )
{
    // We can still
    if ( absoluteMrl.empty() == true )
    {
        assert( isFailureRecord() == true );
        return absoluteMrl;
    }
    // Ensure the thumbnail mrl is an absolute mrl and contained in the
    // thumbnail directory.
    assert( utils::file::schemeIs( "file://", absoluteMrl ) == true );
    auto thumbnailDirMrl = utils::file::toMrl( m_ml->thumbnailPath() );
    assert( absoluteMrl.find( thumbnailDirMrl ) == 0 );
    return utils::file::removePath( absoluteMrl, thumbnailDirMrl );
}


}
